{"version":3,"file":"ai-service.js","sources":["utils/ai-service.js"],"sourcesContent":["import { AI_CONFIG, CURRENT_CONFIG } from '../config/ai-config.js';\n\nclass AIService {\n  constructor() {\n    this.config = AI_CONFIG[CURRENT_CONFIG];\n    this.commonConfig = AI_CONFIG.common;\n  }\n\n  // 主要的AI调用方法\n  async chat(message, conversationHistory = []) {\n    try {\n      switch (CURRENT_CONFIG) {\n        case 'openai_compatible':\n          return await this.callOpenAICompatible(message, conversationHistory);\n        case 'custom_api':\n          return await this.callCustomAPI(message, conversationHistory);\n        case 'websocket':\n          return await this.callWebSocket(message);\n        case 'local_model':\n          return await this.callLocalModel(message, conversationHistory);\n        default:\n          throw new Error('未配置AI服务');\n      }\n    } catch (error) {\n      console.error('AI调用失败:', error);\n      throw error;\n    }\n  }\n\n  // OpenAI兼容API调用\n  async callOpenAICompatible(message, history) {\n    const messages = [\n      {\n        role: 'system',\n        content: this.commonConfig.systemPrompt\n      },\n      ...history.map(msg => ({\n        role: msg.type === 'user' ? 'user' : 'assistant',\n        content: msg.content\n      })),\n      {\n        role: 'user',\n        content: message\n      }\n    ];\n\n    const response = await uni.request({\n      url: this.config.apiUrl,\n      method: 'POST',\n      header: this.config.headers,\n      data: {\n        model: this.config.model,\n        messages: messages,\n        max_tokens: this.commonConfig.maxTokens,\n        temperature: this.commonConfig.temperature\n      },\n      timeout: this.commonConfig.timeout\n    });\n\n    if (response.statusCode === 200) {\n      return response.data.choices[0].message.content;\n    } else {\n      throw new Error(`API调用失败: ${response.statusCode}`);\n    }\n  }\n\n  // 自定义API调用\n  async callCustomAPI(message, history) {\n    let requestData;\n    \n    if (this.config.formatRequest) {\n      requestData = this.config.formatRequest(message, history);\n    } else {\n      requestData = {\n        message: message,\n        history: history\n      };\n    }\n\n    const response = await uni.request({\n      url: this.config.apiUrl,\n      method: 'POST',\n      header: this.config.headers,\n      data: requestData,\n      timeout: this.commonConfig.timeout\n    });\n\n    if (response.statusCode === 200) {\n      if (this.config.parseResponse) {\n        return this.config.parseResponse(response);\n      } else {\n        return response.data.response || response.data.answer;\n      }\n    } else {\n      throw new Error(`API调用失败: ${response.statusCode}`);\n    }\n  }\n\n  // WebSocket调用 (需要在页面中实现WebSocket连接)\n  async callWebSocket(message) {\n    return new Promise((resolve, reject) => {\n      const ws = uni.connectSocket({\n        url: this.config.wsUrl,\n        header: {\n          'Authorization': `Bearer ${this.config.apiKey}`\n        }\n      });\n\n      ws.onOpen(() => {\n        ws.send({\n          data: JSON.stringify({\n            message: message,\n            type: 'chat'\n          })\n        });\n      });\n\n      ws.onMessage((res) => {\n        try {\n          const data = JSON.parse(res.data);\n          if (data.type === 'response') {\n            resolve(data.content);\n            ws.close();\n          }\n        } catch (error) {\n          reject(error);\n        }\n      });\n\n      ws.onError((error) => {\n        reject(error);\n      });\n\n      // 设置超时\n      setTimeout(() => {\n        ws.close();\n        reject(new Error('WebSocket连接超时'));\n      }, this.commonConfig.timeout);\n    });\n  }\n\n  // 本地模型调用\n  async callLocalModel(message, history) {\n    const response = await uni.request({\n      url: this.config.apiUrl,\n      method: 'POST',\n      header: {\n        'Content-Type': 'application/json'\n      },\n      data: {\n        prompt: message,\n        history: history,\n        max_length: this.commonConfig.maxTokens,\n        temperature: this.commonConfig.temperature\n      },\n      timeout: this.config.timeout || this.commonConfig.timeout\n    });\n\n    if (response.statusCode === 200) {\n      return response.data.response;\n    } else {\n      throw new Error(`本地模型调用失败: ${response.statusCode}`);\n    }\n  }\n\n  // 重试机制\n  async chatWithRetry(message, conversationHistory = []) {\n    let lastError;\n    \n    for (let i = 0; i < this.commonConfig.retryTimes; i++) {\n      try {\n        return await this.chat(message, conversationHistory);\n      } catch (error) {\n        lastError = error;\n        console.warn(`AI调用失败，第${i + 1}次重试:`, error);\n        \n        // 等待一段时间后重试\n        if (i < this.commonConfig.retryTimes - 1) {\n          await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));\n        }\n      }\n    }\n    \n    throw lastError;\n  }\n}\n\nexport default new AIService();\n"],"names":["AI_CONFIG","CURRENT_CONFIG","uni"],"mappings":"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"}
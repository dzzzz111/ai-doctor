{"version":3,"file":"index.js","sources":["pages/ai-doctor/index.vue","../../xiaochengxu/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvYWktZG9jdG9yL2luZGV4LnZ1ZQ"],"sourcesContent":["<template>\n  <view class=\"container\">\n    <!-- 顶部标题 -->\n    <view class=\"header\">\n      <view class=\"status-bar\"></view>\n      <view class=\"nav-bar\">\n        <view class=\"back-btn\" @click=\"goBack\">\n          <text class=\"iconfont icon-back\">←</text>\n        </view>\n        <text class=\"header-title\">AI智能问诊</text>\n        <view class=\"placeholder\"></view>\n      </view>\n    </view>\n    \n    <!-- 原生聊天界面 -->\n    <view class=\"chat-container\">\n      <!-- 聊天消息列表 -->\n      <scroll-view\n        class=\"message-list\"\n        scroll-y\n        :scroll-top=\"scrollTop\"\n        scroll-with-animation\n      >\n        <view class=\"message-item\" v-for=\"(message, index) in messageList\" :key=\"index\">\n          <!-- 用户消息 -->\n          <view class=\"message user-message\" v-if=\"message.type === 'user'\">\n            <view class=\"message-content user-content\">\n              <text>{{ message.content }}</text>\n            </view>\n            <view class=\"message-avatar user-avatar\">\n              <image src=\"/static/images/user-avatar.png\" mode=\"aspectFill\"></image>\n            </view>\n          </view>\n\n          <!-- AI消息 -->\n          <view class=\"message ai-message\" v-else>\n            <view class=\"message-avatar ai-avatar\">\n              <image src=\"/static/images/ai-avatar.png\" mode=\"aspectFill\"></image>\n            </view>\n            <view class=\"message-content ai-content\">\n              <text>{{ message.content }}</text>\n              <view class=\"message-time\">{{ message.time }}</view>\n            </view>\n          </view>\n        </view>\n\n        <!-- 加载状态 -->\n        <view class=\"loading-message\" v-if=\"isLoading\">\n          <view class=\"message-avatar ai-avatar\">\n            <image src=\"/static/images/ai-avatar.png\" mode=\"aspectFill\"></image>\n          </view>\n          <view class=\"loading-dots\">\n            <view class=\"dot\"></view>\n            <view class=\"dot\"></view>\n            <view class=\"dot\"></view>\n          </view>\n        </view>\n      </scroll-view>\n\n      <!-- 输入区域 -->\n      <view class=\"input-area\">\n        <view class=\"input-wrapper\">\n          <textarea\n            class=\"message-input\"\n            v-model=\"inputMessage\"\n            placeholder=\"请描述您的症状...\"\n            :maxlength=\"500\"\n            auto-height\n            @confirm=\"sendMessage\"\n          ></textarea>\n          <view class=\"input-actions\">\n            <text class=\"char-count\">{{ inputMessage.length }}/500</text>\n            <view\n              class=\"send-btn\"\n              :class=\"{ disabled: !inputMessage.trim() || isLoading }\"\n              @click=\"sendMessage\"\n            >\n              <text>发送</text>\n            </view>\n          </view>\n        </view>\n      </view>\n    </view>\n  </view>\n</template>\n\n<script>\n// import AIService from '../../utils/ai-service.js';\n\nexport default {\n  data() {\n    return {\n      statusBarHeight: 20,\n      messageList: [\n        {\n          type: 'ai',\n          content: '您好！我是您的AI医疗助手，请描述您的症状，我会为您提供专业的医疗建议。',\n          time: this.getCurrentTime()\n        }\n      ],\n      inputMessage: '',\n      isLoading: false,\n      scrollTop: 0\n    };\n  },\n  onLoad() {\n    // 获取状态栏高度\n    const systemInfo = uni.getSystemInfoSync();\n    this.statusBarHeight = systemInfo.statusBarHeight || 20;\n\n    // 初始化聊天\n    this.scrollToBottom();\n  },\n  methods: {\n    // 发送消息\n    async sendMessage() {\n      if (!this.inputMessage.trim() || this.isLoading) return;\n\n      const userMessage = this.inputMessage.trim();\n      this.inputMessage = '';\n\n      // 添加用户消息\n      this.messageList.push({\n        type: 'user',\n        content: userMessage,\n        time: this.getCurrentTime()\n      });\n\n      this.scrollToBottom();\n      this.isLoading = true;\n\n      try {\n        // 调用您的大模型API\n        const aiResponse = await this.callAIModel(userMessage);\n\n        // 添加AI回复\n        this.messageList.push({\n          type: 'ai',\n          content: aiResponse,\n          time: this.getCurrentTime()\n        });\n\n      } catch (error) {\n        console.error('AI调用失败:', error);\n        this.messageList.push({\n          type: 'ai',\n          content: '抱歉，我暂时无法回答您的问题，请稍后再试。',\n          time: this.getCurrentTime()\n        });\n      } finally {\n        this.isLoading = false;\n        this.scrollToBottom();\n      }\n    },\n\n    // 调用大模型API\n    async callAIModel(message) {\n      // 获取对话历史（最近5轮对话）\n      const conversationHistory = this.messageList\n        .slice(-10) // 取最近10条消息（5轮对话）\n        .filter(msg => msg.type !== 'system');\n\n      // 临时模拟AI回复，实际项目中替换为真实AI服务调用\n      // return await AIService.chatWithRetry(message, conversationHistory);\n      \n      // 模拟AI回复\n      const responses = [\n        '根据您描述的症状，建议您注意休息，多喝水。如果症状持续，请及时就医。',\n        '这种情况可能是由多种原因引起的，建议您保持良好的作息习惯，如有不适请咨询专业医生。',\n        '感谢您的咨询，根据您的描述，建议您先观察症状变化，必要时到医院进行检查。',\n        '您提到的症状需要进一步观察，建议您记录症状变化情况，如有加重请及时就医。'\n      ];\n      \n      // 模拟网络延迟\n      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));\n      \n      return responses[Math.floor(Math.random() * responses.length)];\n    },\n\n    // 获取当前时间\n    getCurrentTime() {\n      const now = new Date();\n      return `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n    },\n\n    // 滚动到底部\n    scrollToBottom() {\n      this.$nextTick(() => {\n        this.scrollTop = 999999;\n      });\n    },\n\n    goBack() {\n      uni.navigateBack({\n        delta: 1,\n        fail: () => {\n          uni.switchTab({\n            url: '/pages/index/index'\n          });\n        }\n      });\n    }\n  }\n}\n</script>\n\n<style>\n.container {\n  background-color: #f5f7fa;\n  min-height: 100vh;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n}\n\n/* 顶部标题 */\n.header {\n  background: linear-gradient(to right, #3a7bd5, #00d2ff);\n  flex-shrink: 0;\n  position: relative;\n  z-index: 100;\n}\n\n.status-bar {\n  height: 44rpx;\n  width: 100%;\n}\n\n.nav-bar {\n  height: 90rpx;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 30rpx;\n  position: relative;\n}\n\n.back-btn {\n  width: 60rpx;\n  height: 60rpx;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.back-btn text {\n  color: #fff;\n  font-size: 36rpx;\n}\n\n.header-title {\n  font-size: 36rpx;\n  font-weight: 500;\n  color: #fff;\n  flex: 1;\n  text-align: center;\n}\n\n.placeholder {\n  width: 60rpx;\n}\n\n/* 聊天容器 */\n.chat-container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 134rpx);\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n}\n\n/* 消息列表 */\n.message-list {\n  flex: 1;\n  padding: 20rpx;\n  overflow-y: auto;\n}\n\n.message-item {\n  margin-bottom: 30rpx;\n}\n\n.message {\n  display: flex;\n  align-items: flex-end;\n  max-width: 80%;\n}\n\n/* 用户消息 */\n.user-message {\n  justify-content: flex-end;\n  margin-left: auto;\n}\n\n.user-content {\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: #fff;\n  margin-right: 20rpx;\n  order: 1;\n}\n\n.user-avatar {\n  order: 2;\n}\n\n/* AI消息 */\n.ai-message {\n  justify-content: flex-start;\n}\n\n.ai-content {\n  background: #fff;\n  color: #333;\n  margin-left: 20rpx;\n  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.1);\n}\n\n.message-content {\n  padding: 24rpx 30rpx;\n  border-radius: 24rpx;\n  font-size: 28rpx;\n  line-height: 1.5;\n  word-wrap: break-word;\n  position: relative;\n}\n\n.message-avatar {\n  width: 80rpx;\n  height: 80rpx;\n  border-radius: 50%;\n  overflow: hidden;\n  flex-shrink: 0;\n}\n\n.message-avatar image {\n  width: 100%;\n  height: 100%;\n}\n\n.message-time {\n  font-size: 22rpx;\n  color: #999;\n  margin-top: 8rpx;\n  text-align: right;\n}\n\n/* 加载动画 */\n.loading-message {\n  display: flex;\n  align-items: center;\n  margin-bottom: 30rpx;\n}\n\n.loading-dots {\n  display: flex;\n  align-items: center;\n  padding: 24rpx 30rpx;\n  background: #fff;\n  border-radius: 24rpx;\n  margin-left: 20rpx;\n  box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.1);\n}\n\n.dot {\n  width: 12rpx;\n  height: 12rpx;\n  border-radius: 50%;\n  background: #667eea;\n  margin: 0 6rpx;\n  animation: loadingDot 1.4s ease-in-out infinite both;\n}\n\n.dot:nth-child(1) { animation-delay: -0.32s; }\n.dot:nth-child(2) { animation-delay: -0.16s; }\n\n@keyframes loadingDot {\n  0%, 80%, 100% {\n    transform: scale(0.8);\n    opacity: 0.5;\n  }\n  40% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n/* 输入区域 */\n.input-area {\n  background: #fff;\n  padding: 20rpx;\n  border-top: 1rpx solid #f0f0f0;\n  box-shadow: 0 -4rpx 12rpx rgba(0, 0, 0, 0.05);\n}\n\n.input-wrapper {\n  background: #f8f9fa;\n  border-radius: 24rpx;\n  padding: 20rpx;\n  border: 2rpx solid #e9ecef;\n  transition: border-color 0.3s ease;\n}\n\n.input-wrapper:focus-within {\n  border-color: #667eea;\n}\n\n.message-input {\n  width: 100%;\n  min-height: 80rpx;\n  max-height: 200rpx;\n  font-size: 28rpx;\n  line-height: 1.5;\n  background: transparent;\n  border: none;\n  outline: none;\n  resize: none;\n  color: #333;\n}\n\n.message-input::placeholder {\n  color: #999;\n}\n\n.input-actions {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 16rpx;\n}\n\n.char-count {\n  font-size: 24rpx;\n  color: #999;\n}\n\n.send-btn {\n  background: linear-gradient(135deg, #667eea, #764ba2);\n  color: #fff;\n  padding: 16rpx 32rpx;\n  border-radius: 20rpx;\n  font-size: 26rpx;\n  font-weight: 500;\n  transition: all 0.3s ease;\n  box-shadow: 0 4rpx 12rpx rgba(102, 126, 234, 0.3);\n}\n\n.send-btn:active {\n  transform: scale(0.95);\n}\n\n.send-btn.disabled {\n  background: #ccc;\n  box-shadow: none;\n  opacity: 0.6;\n}\n\n/* 响应式设计 */\n@media screen and (max-width: 750rpx) {\n  .message {\n    max-width: 90%;\n  }\n\n  .message-content {\n    padding: 20rpx 24rpx;\n    font-size: 26rpx;\n  }\n\n  .message-avatar {\n    width: 70rpx;\n    height: 70rpx;\n  }\n}\n</style> ","import MiniProgramPage from 'E:/yd0/yd/pages/ai-doctor/index.vue'\nwx.createPage(MiniProgramPage)"],"names":["uni"],"mappings":";;;AAyFA,MAAK,YAAU;AAAA,EACb,OAAO;AACL,WAAO;AAAA,MACL,iBAAiB;AAAA,MACjB,aAAa;AAAA,QACX;AAAA,UACE,MAAM;AAAA,UACN,SAAS;AAAA,UACT,MAAM,KAAK,eAAe;AAAA,QAC5B;AAAA,MACD;AAAA,MACD,cAAc;AAAA,MACd,WAAW;AAAA,MACX,WAAW;AAAA;EAEd;AAAA,EACD,SAAS;AAEP,UAAM,aAAaA,oBAAI;AACvB,SAAK,kBAAkB,WAAW,mBAAmB;AAGrD,SAAK,eAAc;AAAA,EACpB;AAAA,EACD,SAAS;AAAA;AAAA,IAEP,MAAM,cAAc;AAClB,UAAI,CAAC,KAAK,aAAa,KAAI,KAAM,KAAK;AAAW;AAEjD,YAAM,cAAc,KAAK,aAAa,KAAI;AAC1C,WAAK,eAAe;AAGpB,WAAK,YAAY,KAAK;AAAA,QACpB,MAAM;AAAA,QACN,SAAS;AAAA,QACT,MAAM,KAAK,eAAe;AAAA,MAC5B,CAAC;AAED,WAAK,eAAc;AACnB,WAAK,YAAY;AAEjB,UAAI;AAEF,cAAM,aAAa,MAAM,KAAK,YAAY,WAAW;AAGrD,aAAK,YAAY,KAAK;AAAA,UACpB,MAAM;AAAA,UACN,SAAS;AAAA,UACT,MAAM,KAAK,eAAe;AAAA,QAC5B,CAAC;AAAA,MAED,SAAO,OAAO;AACdA,sBAAA,MAAA,MAAA,SAAA,oCAAc,WAAW,KAAK;AAC9B,aAAK,YAAY,KAAK;AAAA,UACpB,MAAM;AAAA,UACN,SAAS;AAAA,UACT,MAAM,KAAK,eAAe;AAAA,QAC5B,CAAC;AAAA,MACH,UAAU;AACR,aAAK,YAAY;AACjB,aAAK,eAAc;AAAA,MACrB;AAAA,IACD;AAAA;AAAA,IAGD,MAAM,YAAY,SAAS;AAEG,WAAK,YAC9B,MAAM,GAAG,EACT,OAAO,SAAO,IAAI,SAAS,QAAQ;AAMtC,YAAM,YAAY;AAAA,QAChB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA;AAIF,YAAM,IAAI,QAAQ,aAAW,WAAW,SAAS,MAAO,KAAK,OAAM,IAAK,GAAI,CAAC;AAE7E,aAAO,UAAU,KAAK,MAAM,KAAK,WAAW,UAAU,MAAM,CAAC;AAAA,IAC9D;AAAA;AAAA,IAGD,iBAAiB;AACf,YAAM,MAAM,oBAAI;AAChB,aAAO,GAAG,IAAI,SAAU,EAAC,SAAQ,EAAG,SAAS,GAAG,GAAG,CAAC,IAAI,IAAI,WAAY,EAAC,SAAU,EAAC,SAAS,GAAG,GAAG,CAAC;AAAA,IACrG;AAAA;AAAA,IAGD,iBAAiB;AACf,WAAK,UAAU,MAAM;AACnB,aAAK,YAAY;AAAA,MACnB,CAAC;AAAA,IACF;AAAA,IAED,SAAS;AACPA,oBAAAA,MAAI,aAAa;AAAA,QACf,OAAO;AAAA,QACP,MAAM,MAAM;AACVA,wBAAAA,MAAI,UAAU;AAAA,YACZ,KAAK;AAAA,UACP,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1MA,GAAG,WAAW,eAAe;"}